// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type InstitutionType string

const (
	InstitutionTypeClinic   InstitutionType = "clinic"
	InstitutionTypeHospital InstitutionType = "hospital"
)

func (e *InstitutionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InstitutionType(s)
	case string:
		*e = InstitutionType(s)
	default:
		return fmt.Errorf("unsupported scan type for InstitutionType: %T", src)
	}
	return nil
}

type NullInstitutionType struct {
	InstitutionType InstitutionType
	Valid           bool // Valid is true if InstitutionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInstitutionType) Scan(value interface{}) error {
	if value == nil {
		ns.InstitutionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InstitutionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInstitutionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InstitutionType), nil
}

type ProfessionalType string

const (
	ProfessionalTypeDoctor ProfessionalType = "doctor"
	ProfessionalTypeNurse  ProfessionalType = "nurse"
)

func (e *ProfessionalType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProfessionalType(s)
	case string:
		*e = ProfessionalType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProfessionalType: %T", src)
	}
	return nil
}

type NullProfessionalType struct {
	ProfessionalType ProfessionalType
	Valid            bool // Valid is true if ProfessionalType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProfessionalType) Scan(value interface{}) error {
	if value == nil {
		ns.ProfessionalType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProfessionalType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProfessionalType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProfessionalType), nil
}

type SpecialtyName string

const (
	SpecialtyNameAllergyandimmunology              SpecialtyName = "Allergy and immunology"
	SpecialtyNameAnesthesiology                    SpecialtyName = "Anesthesiology"
	SpecialtyNameDermatology                       SpecialtyName = "Dermatology"
	SpecialtyNameDiagnosticradiology               SpecialtyName = "Diagnostic radiology"
	SpecialtyNameEmergencymedicine                 SpecialtyName = "Emergency medicine"
	SpecialtyNameFamilymedicine                    SpecialtyName = "Family medicine"
	SpecialtyNameInternalmedicine                  SpecialtyName = "Internal medicine"
	SpecialtyNameMedicalgenetics                   SpecialtyName = "Medical genetics"
	SpecialtyNameNeurology                         SpecialtyName = "Neurology"
	SpecialtyNameNuclearmedicine                   SpecialtyName = "Nuclear medicine"
	SpecialtyNameObstetricsandgynecology           SpecialtyName = "Obstetrics and gynecology"
	SpecialtyNameOphthalmology                     SpecialtyName = "Ophthalmology"
	SpecialtyNamePathology                         SpecialtyName = "Pathology"
	SpecialtyNamePediatrics                        SpecialtyName = "Pediatrics"
	SpecialtyNamePhysicalmedicineandrehabilitation SpecialtyName = "Physical medicine and rehabilitation"
	SpecialtyNamePreventivemedicine                SpecialtyName = "Preventive medicine"
	SpecialtyNamePsychiatry                        SpecialtyName = "Psychiatry"
	SpecialtyNameRadiationoncology                 SpecialtyName = "Radiation oncology"
	SpecialtyNameSurgery                           SpecialtyName = "Surgery"
	SpecialtyNameUrology                           SpecialtyName = "Urology"
)

func (e *SpecialtyName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SpecialtyName(s)
	case string:
		*e = SpecialtyName(s)
	default:
		return fmt.Errorf("unsupported scan type for SpecialtyName: %T", src)
	}
	return nil
}

type NullSpecialtyName struct {
	SpecialtyName SpecialtyName
	Valid         bool // Valid is true if SpecialtyName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSpecialtyName) Scan(value interface{}) error {
	if value == nil {
		ns.SpecialtyName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SpecialtyName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSpecialtyName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SpecialtyName), nil
}

type Doctor struct {
	CreatedAt       interface{}
	UpdatedAt       interface{}
	Uuid            pgtype.UUID
	InstitutionUuid string
	Firstname       string
	Lastname        string
	GovID           string
	Birthdate       pgtype.Date
	Email           string
	Password        string
	PhoneNumber     string
	Credentials     string
	Pending         bool
	PatientPending  bool
	Specialities    []int32
}

type Doctoraccessrequest struct {
	CreatedAt   interface{}
	UpdatedAt   interface{}
	Uuid        pgtype.UUID
	PatientUuid string
	DoctorUuid  string
	Pending     bool
	Approved    bool
}

type Government struct {
	CreatedAt interface{}
	UpdatedAt interface{}
	Uuid      pgtype.UUID
	Email     string
	Password  string
}

type Governmentenrollmentrequest struct {
	CreatedAt       interface{}
	UpdatedAt       interface{}
	Uuid            pgtype.UUID
	InstitutionUuid string
	Pending         bool
	Approved        pgtype.Bool
}

type Healthrecord struct {
	CreatedAt     interface{}
	UpdatedAt     interface{}
	Uuid          pgtype.UUID
	PatientUuid   pgtype.UUID
	PrivateKey    string
	Type          string
	Specialty     string
	ContentFormat string
}

type Institution struct {
	CreatedAt   interface{}
	UpdatedAt   interface{}
	Uuid        pgtype.UUID
	Name        string
	Address     string
	Credentials string
	Type        string
	GovID       string
}

type Institutionenrollmentrequest struct {
	CreatedAt        interface{}
	UpdatedAt        interface{}
	Uuid             pgtype.UUID
	InstitutionUuid  string
	DoctorUuid       pgtype.Text
	NurseUuid        pgtype.Text
	Pending          bool
	Approved         pgtype.Bool
	ProfessionalType ProfessionalType
}

type Institutionuser struct {
	CreatedAt       interface{}
	UpdatedAt       interface{}
	Uuid            pgtype.UUID
	InstitutionUuid string
	Firstname       string
	Lastname        string
	GovID           string
	Birthdate       pgtype.Date
	Email           string
	Password        string
	PhoneNumber     string
	Role            string
}

type Nurse struct {
	CreatedAt       interface{}
	UpdatedAt       interface{}
	Uuid            pgtype.UUID
	InstitutionUuid string
	Firstname       string
	Lastname        string
	GovID           string
	Birthdate       pgtype.Date
	Email           string
	Password        string
	PhoneNumber     string
	Credentials     string
}

type Patient struct {
	CreatedAt   interface{}
	UpdatedAt   interface{}
	Uuid        pgtype.UUID
	Firstname   string
	Lastname    string
	GovID       string
	Birthdate   pgtype.Date
	Email       string
	Password    string
	PhoneNumber string
	Sex         string
	Pending     bool
	Status      string
	Bed         string
}

type Specialty struct {
	CreatedAt   interface{}
	UpdatedAt   interface{}
	Uuid        pgtype.UUID
	ID          int32
	Description string
	Name        SpecialtyName
}
