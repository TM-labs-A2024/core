// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type HealthRecordType string

const (
	HealthRecordTypeStudy     HealthRecordType = "study"
	HealthRecordTypeReport    HealthRecordType = "report"
	HealthRecordTypeEvolution HealthRecordType = "evolution"
	HealthRecordTypeOrder     HealthRecordType = "order"
)

func (e *HealthRecordType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HealthRecordType(s)
	case string:
		*e = HealthRecordType(s)
	default:
		return fmt.Errorf("unsupported scan type for HealthRecordType: %T", src)
	}
	return nil
}

type NullHealthRecordType struct {
	HealthRecordType HealthRecordType `json:"healthRecordType"`
	Valid            bool             `json:"valid"` // Valid is true if HealthRecordType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHealthRecordType) Scan(value interface{}) error {
	if value == nil {
		ns.HealthRecordType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HealthRecordType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHealthRecordType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HealthRecordType), nil
}

type InstitutionType string

const (
	InstitutionTypeClinic   InstitutionType = "clinic"
	InstitutionTypeHospital InstitutionType = "hospital"
)

func (e *InstitutionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InstitutionType(s)
	case string:
		*e = InstitutionType(s)
	default:
		return fmt.Errorf("unsupported scan type for InstitutionType: %T", src)
	}
	return nil
}

type NullInstitutionType struct {
	InstitutionType InstitutionType `json:"institutionType"`
	Valid           bool            `json:"valid"` // Valid is true if InstitutionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInstitutionType) Scan(value interface{}) error {
	if value == nil {
		ns.InstitutionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InstitutionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInstitutionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InstitutionType), nil
}

type SpecialtyName string

const (
	SpecialtyNameAllergyandimmunology              SpecialtyName = "Allergy and immunology"
	SpecialtyNameAnesthesiology                    SpecialtyName = "Anesthesiology"
	SpecialtyNameDermatology                       SpecialtyName = "Dermatology"
	SpecialtyNameDiagnosticradiology               SpecialtyName = "Diagnostic radiology"
	SpecialtyNameEmergencymedicine                 SpecialtyName = "Emergency medicine"
	SpecialtyNameFamilymedicine                    SpecialtyName = "Family medicine"
	SpecialtyNameInternalmedicine                  SpecialtyName = "Internal medicine"
	SpecialtyNameMedicalgenetics                   SpecialtyName = "Medical genetics"
	SpecialtyNameNeurology                         SpecialtyName = "Neurology"
	SpecialtyNameNuclearmedicine                   SpecialtyName = "Nuclear medicine"
	SpecialtyNameObstetricsandgynecology           SpecialtyName = "Obstetrics and gynecology"
	SpecialtyNameOphthalmology                     SpecialtyName = "Ophthalmology"
	SpecialtyNamePathology                         SpecialtyName = "Pathology"
	SpecialtyNamePediatrics                        SpecialtyName = "Pediatrics"
	SpecialtyNamePhysicalmedicineandrehabilitation SpecialtyName = "Physical medicine and rehabilitation"
	SpecialtyNamePreventivemedicine                SpecialtyName = "Preventive medicine"
	SpecialtyNamePsychiatry                        SpecialtyName = "Psychiatry"
	SpecialtyNameRadiationoncology                 SpecialtyName = "Radiation oncology"
	SpecialtyNameSurgery                           SpecialtyName = "Surgery"
	SpecialtyNameUrology                           SpecialtyName = "Urology"
)

func (e *SpecialtyName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SpecialtyName(s)
	case string:
		*e = SpecialtyName(s)
	default:
		return fmt.Errorf("unsupported scan type for SpecialtyName: %T", src)
	}
	return nil
}

type NullSpecialtyName struct {
	SpecialtyName SpecialtyName `json:"specialtyName"`
	Valid         bool          `json:"valid"` // Valid is true if SpecialtyName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSpecialtyName) Scan(value interface{}) error {
	if value == nil {
		ns.SpecialtyName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SpecialtyName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSpecialtyName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SpecialtyName), nil
}

type Doctor struct {
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt      pgtype.Timestamptz `json:"updatedAt"`
	ID             pgtype.UUID        `json:"id"`
	InstitutionID  pgtype.UUID        `json:"institutionId"`
	Firstname      string             `json:"firstname"`
	Lastname       string             `json:"lastname"`
	GovID          string             `json:"govId"`
	Birthdate      pgtype.Timestamp   `json:"birthdate"`
	Email          string             `json:"email"`
	Password       string             `json:"password"`
	PhoneNumber    string             `json:"phoneNumber"`
	Credentials    string             `json:"credentials"`
	Pending        bool               `json:"pending"`
	PatientPending bool               `json:"patientPending"`
}

type DoctorAccessRequest struct {
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
	ID        pgtype.UUID        `json:"id"`
	PatientID pgtype.UUID        `json:"patientId"`
	DoctorID  pgtype.UUID        `json:"doctorId"`
	Pending   bool               `json:"pending"`
	Approved  bool               `json:"approved"`
}

type DoctorSpecialty struct {
	DoctorID    pgtype.UUID `json:"doctorId"`
	SpecialtyID pgtype.UUID `json:"specialtyId"`
}

type Government struct {
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
	ID        pgtype.UUID        `json:"id"`
	Email     string             `json:"email"`
	Password  string             `json:"password"`
}

type GovernmentEnrollmentRequest struct {
	CreatedAt     pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
	ID            pgtype.UUID        `json:"id"`
	InstitutionID pgtype.UUID        `json:"institutionId"`
	Pending       bool               `json:"pending"`
	Approved      bool               `json:"approved"`
}

type HealthRecord struct {
	CreatedAt     pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
	ID            pgtype.UUID        `json:"id"`
	PatientID     pgtype.UUID        `json:"patientId"`
	PrivateKey    string             `json:"privateKey"`
	PublicKey     string             `json:"publicKey"`
	Type          HealthRecordType   `json:"type"`
	SpecialtyID   pgtype.UUID        `json:"specialtyId"`
	ContentFormat string             `json:"contentFormat"`
}

type Institution struct {
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Address     string             `json:"address"`
	Credentials string             `json:"credentials"`
	Type        InstitutionType    `json:"type"`
	GovID       string             `json:"govId"`
	Pending     bool               `json:"pending"`
}

type InstitutionEnrollmentRequest struct {
	CreatedAt     pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
	ID            pgtype.UUID        `json:"id"`
	InstitutionID pgtype.UUID        `json:"institutionId"`
	DoctorID      pgtype.UUID        `json:"doctorId"`
	NurseID       pgtype.UUID        `json:"nurseId"`
	Pending       bool               `json:"pending"`
	Approved      bool               `json:"approved"`
}

type InstitutionUser struct {
	CreatedAt     pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
	ID            pgtype.UUID        `json:"id"`
	InstitutionID pgtype.UUID        `json:"institutionId"`
	Firstname     string             `json:"firstname"`
	Lastname      string             `json:"lastname"`
	GovID         string             `json:"govId"`
	Birthdate     pgtype.Timestamp   `json:"birthdate"`
	Email         string             `json:"email"`
	Password      string             `json:"password"`
	PhoneNumber   string             `json:"phoneNumber"`
	Role          string             `json:"role"`
}

type Nurse struct {
	CreatedAt     pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
	ID            pgtype.UUID        `json:"id"`
	InstitutionID pgtype.UUID        `json:"institutionId"`
	Firstname     string             `json:"firstname"`
	Lastname      string             `json:"lastname"`
	GovID         string             `json:"govId"`
	Birthdate     pgtype.Timestamp   `json:"birthdate"`
	Email         string             `json:"email"`
	Password      string             `json:"password"`
	PhoneNumber   string             `json:"phoneNumber"`
	Credentials   string             `json:"credentials"`
	Pending       bool               `json:"pending"`
}

type Patient struct {
	CreatedAt     pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
	ID            pgtype.UUID        `json:"id"`
	InstitutionID pgtype.UUID        `json:"institutionId"`
	Firstname     string             `json:"firstname"`
	Lastname      string             `json:"lastname"`
	GovID         string             `json:"govId"`
	Birthdate     pgtype.Timestamp   `json:"birthdate"`
	Email         string             `json:"email"`
	Password      string             `json:"password"`
	PhoneNumber   string             `json:"phoneNumber"`
	Sex           string             `json:"sex"`
	Pending       bool               `json:"pending"`
	Status        string             `json:"status"`
	Bed           string             `json:"bed"`
}

type Specialty struct {
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
	ID          pgtype.UUID        `json:"id"`
	Description string             `json:"description"`
	Name        SpecialtyName      `json:"name"`
}
