// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccessRequest = `-- name: CreateAccessRequest :one
INSERT INTO doctor_access_request(patient_id, doctor_id)
VALUES ($1, $2)
RETURNING created_at, updated_at, id, patient_id, doctor_id, pending, approved
`

type CreateAccessRequestParams struct {
	PatientID pgtype.UUID `json:"patientId"`
	DoctorID  pgtype.UUID `json:"doctorId"`
}

func (q *Queries) CreateAccessRequest(ctx context.Context, arg CreateAccessRequestParams) (DoctorAccessRequest, error) {
	row := q.db.QueryRow(ctx, createAccessRequest, arg.PatientID, arg.DoctorID)
	var i DoctorAccessRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PatientID,
		&i.DoctorID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const createDoctor = `-- name: CreateDoctor :one
INSERT INTO doctor(
        institution_id,
        firstname,
        lastname,
        gov_id,
        birthdate,
        password,
        email,
        phone_number,
        credentials,
        sex
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        crypt($6, gen_salt('bf')),
        $7,
        $8,
        $9,
        $10
    )
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, sex, password, phone_number, credentials, pending, patient_pending
`

type CreateDoctorParams struct {
	InstitutionID pgtype.UUID      `json:"institutionId"`
	Firstname     string           `json:"firstname"`
	Lastname      string           `json:"lastname"`
	GovID         string           `json:"govId"`
	Birthdate     pgtype.Timestamp `json:"birthdate"`
	Crypt         string           `json:"crypt"`
	Email         string           `json:"email"`
	PhoneNumber   string           `json:"phoneNumber"`
	Credentials   string           `json:"credentials"`
	Sex           string           `json:"sex"`
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, createDoctor,
		arg.InstitutionID,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Crypt,
		arg.Email,
		arg.PhoneNumber,
		arg.Credentials,
		arg.Sex,
	)
	var i Doctor
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Sex,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
		&i.PatientPending,
	)
	return i, err
}

const createGovernment = `-- name: CreateGovernment :one
INSERT INTO government(email, password)
VALUES ($1, $2)
RETURNING created_at, updated_at, id, email, password
`

type CreateGovernmentParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateGovernment(ctx context.Context, arg CreateGovernmentParams) (Government, error) {
	row := q.db.QueryRow(ctx, createGovernment, arg.Email, arg.Password)
	var i Government
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const createGovernmentEnrollmentRequests = `-- name: CreateGovernmentEnrollmentRequests :one
INSERT INTO government_enrollment_request (institution_id)
VALUES ($1)
RETURNING created_at, updated_at, id, institution_id, pending, approved
`

func (q *Queries) CreateGovernmentEnrollmentRequests(ctx context.Context, institutionID pgtype.UUID) (GovernmentEnrollmentRequest, error) {
	row := q.db.QueryRow(ctx, createGovernmentEnrollmentRequests, institutionID)
	var i GovernmentEnrollmentRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const createHealthRecord = `-- name: CreateHealthRecord :one
INSERT INTO health_record (
        patient_id,
        private_key,
        public_key,
        type,
        specialty_id,
        content_format,
        author,
        title,
        description
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING created_at, updated_at, id, patient_id, author, title, description, private_key, public_key, type, specialty_id, content_format
`

type CreateHealthRecordParams struct {
	PatientID     pgtype.UUID `json:"patientId"`
	PrivateKey    string      `json:"privateKey"`
	PublicKey     string      `json:"publicKey"`
	Type          string      `json:"type"`
	SpecialtyID   pgtype.UUID `json:"specialtyId"`
	ContentFormat string      `json:"contentFormat"`
	Author        string      `json:"author"`
	Title         string      `json:"title"`
	Description   string      `json:"description"`
}

func (q *Queries) CreateHealthRecord(ctx context.Context, arg CreateHealthRecordParams) (HealthRecord, error) {
	row := q.db.QueryRow(ctx, createHealthRecord,
		arg.PatientID,
		arg.PrivateKey,
		arg.PublicKey,
		arg.Type,
		arg.SpecialtyID,
		arg.ContentFormat,
		arg.Author,
		arg.Title,
		arg.Description,
	)
	var i HealthRecord
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PatientID,
		&i.Author,
		&i.Title,
		&i.Description,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Type,
		&i.SpecialtyID,
		&i.ContentFormat,
	)
	return i, err
}

const createInstitution = `-- name: CreateInstitution :one
INSERT INTO institution (
        name,
        address,
        credentials,
        type,
        gov_id
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING created_at, updated_at, id, name, address, credentials, type, gov_id, pending
`

type CreateInstitutionParams struct {
	Name        string `json:"name"`
	Address     string `json:"address"`
	Credentials string `json:"credentials"`
	Type        string `json:"type"`
	GovID       string `json:"govId"`
}

func (q *Queries) CreateInstitution(ctx context.Context, arg CreateInstitutionParams) (Institution, error) {
	row := q.db.QueryRow(ctx, createInstitution,
		arg.Name,
		arg.Address,
		arg.Credentials,
		arg.Type,
		arg.GovID,
	)
	var i Institution
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Credentials,
		&i.Type,
		&i.GovID,
		&i.Pending,
	)
	return i, err
}

const createInstitutionEnrollmentRequest = `-- name: CreateInstitutionEnrollmentRequest :one
INSERT INTO institution_enrollment_request(
        institution_id,
        doctor_id,
        nurse_id
    )
VALUES ($1, $2, $3)
RETURNING created_at, updated_at, id, institution_id, doctor_id, nurse_id, pending, approved
`

type CreateInstitutionEnrollmentRequestParams struct {
	InstitutionID pgtype.UUID `json:"institutionId"`
	DoctorID      pgtype.UUID `json:"doctorId"`
	NurseID       pgtype.UUID `json:"nurseId"`
}

func (q *Queries) CreateInstitutionEnrollmentRequest(ctx context.Context, arg CreateInstitutionEnrollmentRequestParams) (InstitutionEnrollmentRequest, error) {
	row := q.db.QueryRow(ctx, createInstitutionEnrollmentRequest, arg.InstitutionID, arg.DoctorID, arg.NurseID)
	var i InstitutionEnrollmentRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.DoctorID,
		&i.NurseID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const createInstitutionUser = `-- name: CreateInstitutionUser :one
INSERT INTO institution_user(
        institution_id,
        firstname,
        lastname,
        gov_id,
        birthdate,
        email,
        password,
        phone_number,
        role
    )
VALUES ($1, $2, $3, $4, $5, $6, crypt($7, gen_salt('bf')), $8, $9)
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, role
`

type CreateInstitutionUserParams struct {
	InstitutionID pgtype.UUID      `json:"institutionId"`
	Firstname     string           `json:"firstname"`
	Lastname      string           `json:"lastname"`
	GovID         string           `json:"govId"`
	Birthdate     pgtype.Timestamp `json:"birthdate"`
	Email         string           `json:"email"`
	Crypt         string           `json:"crypt"`
	PhoneNumber   string           `json:"phoneNumber"`
	Role          string           `json:"role"`
}

func (q *Queries) CreateInstitutionUser(ctx context.Context, arg CreateInstitutionUserParams) (InstitutionUser, error) {
	row := q.db.QueryRow(ctx, createInstitutionUser,
		arg.InstitutionID,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Email,
		arg.Crypt,
		arg.PhoneNumber,
		arg.Role,
	)
	var i InstitutionUser
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const createNurse = `-- name: CreateNurse :one
INSERT INTO nurse(
        institution_id,
        firstname,
        lastname,
        gov_id,
        birthdate,
        email,
        phone_number,
        credentials,
        password,
        pending,
        sex
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, crypt($9, gen_salt('bf')), $10, $11)
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, sex, email, password, phone_number, credentials, pending
`

type CreateNurseParams struct {
	InstitutionID pgtype.UUID      `json:"institutionId"`
	Firstname     string           `json:"firstname"`
	Lastname      string           `json:"lastname"`
	GovID         string           `json:"govId"`
	Birthdate     pgtype.Timestamp `json:"birthdate"`
	Email         string           `json:"email"`
	PhoneNumber   string           `json:"phoneNumber"`
	Credentials   string           `json:"credentials"`
	Crypt         string           `json:"crypt"`
	Pending       bool             `json:"pending"`
	Sex           string           `json:"sex"`
}

func (q *Queries) CreateNurse(ctx context.Context, arg CreateNurseParams) (Nurse, error) {
	row := q.db.QueryRow(ctx, createNurse,
		arg.InstitutionID,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Email,
		arg.PhoneNumber,
		arg.Credentials,
		arg.Crypt,
		arg.Pending,
		arg.Sex,
	)
	var i Nurse
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Sex,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
	)
	return i, err
}

const createPatient = `-- name: CreatePatient :one
INSERT INTO patient(
        firstname,
        lastname,
        gov_id,
        birthdate,
        email,
        password,
        phone_number,
        sex,
        pending,
        status,
        bed
    )
VALUES ($1, $2, $3, $4, $5, crypt($6, gen_salt('bf')), $7, $8, $9, $10, $11)
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
`

type CreatePatientParams struct {
	Firstname   string           `json:"firstname"`
	Lastname    string           `json:"lastname"`
	GovID       string           `json:"govId"`
	Birthdate   pgtype.Timestamp `json:"birthdate"`
	Email       string           `json:"email"`
	Crypt       string           `json:"crypt"`
	PhoneNumber string           `json:"phoneNumber"`
	Sex         string           `json:"sex"`
	Pending     bool             `json:"pending"`
	Status      string           `json:"status"`
	Bed         string           `json:"bed"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Email,
		arg.Crypt,
		arg.PhoneNumber,
		arg.Sex,
		arg.Pending,
		arg.Status,
		arg.Bed,
	)
	var i Patient
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Sex,
		&i.Pending,
		&i.Status,
		&i.Bed,
	)
	return i, err
}

const createSpecialty = `-- name: CreateSpecialty :one
INSERT INTO specialty(description, name)
VALUES ($1, $2)
RETURNING created_at, updated_at, id, description, name
`

type CreateSpecialtyParams struct {
	Description string        `json:"description"`
	Name        SpecialtyName `json:"name"`
}

func (q *Queries) CreateSpecialty(ctx context.Context, arg CreateSpecialtyParams) (Specialty, error) {
	row := q.db.QueryRow(ctx, createSpecialty, arg.Description, arg.Name)
	var i Specialty
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Description,
		&i.Name,
	)
	return i, err
}

const createSpecialtyDoctorJunction = `-- name: CreateSpecialtyDoctorJunction :one
INSERT INTO doctor_specialty(doctor_id, specialty_id)
VALUES ($1, $2)
RETURNING doctor_id, specialty_id
`

type CreateSpecialtyDoctorJunctionParams struct {
	DoctorID    pgtype.UUID `json:"doctorId"`
	SpecialtyID pgtype.UUID `json:"specialtyId"`
}

func (q *Queries) CreateSpecialtyDoctorJunction(ctx context.Context, arg CreateSpecialtyDoctorJunctionParams) (DoctorSpecialty, error) {
	row := q.db.QueryRow(ctx, createSpecialtyDoctorJunction, arg.DoctorID, arg.SpecialtyID)
	var i DoctorSpecialty
	err := row.Scan(&i.DoctorID, &i.SpecialtyID)
	return i, err
}

const deleteAccessRequestByID = `-- name: DeleteAccessRequestByID :exec
DELETE FROM doctor_access_request
WHERE id = $1
`

func (q *Queries) DeleteAccessRequestByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccessRequestByID, id)
	return err
}

const deleteDoctorByID = `-- name: DeleteDoctorByID :exec
DELETE FROM doctor
WHERE id = $1
`

func (q *Queries) DeleteDoctorByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDoctorByID, id)
	return err
}

const deleteGovernmentByID = `-- name: DeleteGovernmentByID :exec
DELETE FROM government
WHERE id = $1
`

func (q *Queries) DeleteGovernmentByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteGovernmentByID, id)
	return err
}

const deleteGovernmentEnrollmentRequestByID = `-- name: DeleteGovernmentEnrollmentRequestByID :exec
DELETE FROM government_enrollment_request
WHERE id = $1
`

func (q *Queries) DeleteGovernmentEnrollmentRequestByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteGovernmentEnrollmentRequestByID, id)
	return err
}

const deleteHealthRecordByID = `-- name: DeleteHealthRecordByID :exec
DELETE FROM health_record
WHERE id = $1
`

func (q *Queries) DeleteHealthRecordByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteHealthRecordByID, id)
	return err
}

const deleteInstitutionByID = `-- name: DeleteInstitutionByID :exec
DELETE FROM institution
WHERE id = $1
`

func (q *Queries) DeleteInstitutionByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteInstitutionByID, id)
	return err
}

const deleteInstitutionEnrollmentRequestByID = `-- name: DeleteInstitutionEnrollmentRequestByID :exec
DELETE FROM institution_enrollment_request
WHERE id = $1
`

func (q *Queries) DeleteInstitutionEnrollmentRequestByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteInstitutionEnrollmentRequestByID, id)
	return err
}

const deleteInstitutionUserByInsitutionAndUserID = `-- name: DeleteInstitutionUserByInsitutionAndUserID :exec
DELETE FROM institution_user
WHERE id = $1 AND institution_id = $2
`

type DeleteInstitutionUserByInsitutionAndUserIDParams struct {
	ID            pgtype.UUID `json:"id"`
	InstitutionID pgtype.UUID `json:"institutionId"`
}

func (q *Queries) DeleteInstitutionUserByInsitutionAndUserID(ctx context.Context, arg DeleteInstitutionUserByInsitutionAndUserIDParams) error {
	_, err := q.db.Exec(ctx, deleteInstitutionUserByInsitutionAndUserID, arg.ID, arg.InstitutionID)
	return err
}

const deleteNurseByID = `-- name: DeleteNurseByID :exec
DELETE FROM nurse
WHERE id = $1
`

func (q *Queries) DeleteNurseByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNurseByID, id)
	return err
}

const deletePatientByID = `-- name: DeletePatientByID :exec
DELETE FROM patient
WHERE id = $1
`

func (q *Queries) DeletePatientByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePatientByID, id)
	return err
}

const deleteSpecialtyByID = `-- name: DeleteSpecialtyByID :exec
DELETE FROM specialty
WHERE id = $1
`

func (q *Queries) DeleteSpecialtyByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpecialtyByID, id)
	return err
}

const deleteSpecialtyDoctorJunction = `-- name: DeleteSpecialtyDoctorJunction :exec
DELETE FROM doctor_specialty
WHERE doctor_id = $1
    AND specialty_id = $2
`

type DeleteSpecialtyDoctorJunctionParams struct {
	DoctorID    pgtype.UUID `json:"doctorId"`
	SpecialtyID pgtype.UUID `json:"specialtyId"`
}

func (q *Queries) DeleteSpecialtyDoctorJunction(ctx context.Context, arg DeleteSpecialtyDoctorJunctionParams) error {
	_, err := q.db.Exec(ctx, deleteSpecialtyDoctorJunction, arg.DoctorID, arg.SpecialtyID)
	return err
}

const getAccessRequestsByID = `-- name: GetAccessRequestsByID :one
SELECT created_at, updated_at, id, patient_id, doctor_id, pending, approved
FROM doctor_access_request
WHERE id = $1
`

func (q *Queries) GetAccessRequestsByID(ctx context.Context, id pgtype.UUID) (DoctorAccessRequest, error) {
	row := q.db.QueryRow(ctx, getAccessRequestsByID, id)
	var i DoctorAccessRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PatientID,
		&i.DoctorID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const getAccessRequestsByPatientAndDoctorID = `-- name: GetAccessRequestsByPatientAndDoctorID :one
SELECT created_at, updated_at, id, patient_id, doctor_id, pending, approved
FROM doctor_access_request
WHERE patient_id = $1 AND doctor_id = $2
`

type GetAccessRequestsByPatientAndDoctorIDParams struct {
	PatientID pgtype.UUID `json:"patientId"`
	DoctorID  pgtype.UUID `json:"doctorId"`
}

func (q *Queries) GetAccessRequestsByPatientAndDoctorID(ctx context.Context, arg GetAccessRequestsByPatientAndDoctorIDParams) (DoctorAccessRequest, error) {
	row := q.db.QueryRow(ctx, getAccessRequestsByPatientAndDoctorID, arg.PatientID, arg.DoctorID)
	var i DoctorAccessRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PatientID,
		&i.DoctorID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const getDoctorByID = `-- name: GetDoctorByID :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, sex, password, phone_number, credentials, pending, patient_pending
FROM doctor
WHERE id = $1
`

func (q *Queries) GetDoctorByID(ctx context.Context, id pgtype.UUID) (Doctor, error) {
	row := q.db.QueryRow(ctx, getDoctorByID, id)
	var i Doctor
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Sex,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
		&i.PatientPending,
	)
	return i, err
}

const getDoctorByLogin = `-- name: GetDoctorByLogin :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, sex, password, phone_number, credentials, pending, patient_pending
FROM doctor
WHERE email = $1 AND password = crypt($2, password)
`

type GetDoctorByLoginParams struct {
	Email string `json:"email"`
	Crypt string `json:"crypt"`
}

func (q *Queries) GetDoctorByLogin(ctx context.Context, arg GetDoctorByLoginParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, getDoctorByLogin, arg.Email, arg.Crypt)
	var i Doctor
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Sex,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
		&i.PatientPending,
	)
	return i, err
}

const getFirstInstitutionUserByInstitutionID = `-- name: GetFirstInstitutionUserByInstitutionID :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, role
FROM institution_user
WHERE institution_id = $1
ORDER BY created_at
LIMIT 1
`

func (q *Queries) GetFirstInstitutionUserByInstitutionID(ctx context.Context, institutionID pgtype.UUID) (InstitutionUser, error) {
	row := q.db.QueryRow(ctx, getFirstInstitutionUserByInstitutionID, institutionID)
	var i InstitutionUser
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const getGovernmentByLogin = `-- name: GetGovernmentByLogin :one
SELECT created_at, updated_at, id, email, password
FROM government
WHERE email = $1 AND password = crypt($2, password)
`

type GetGovernmentByLoginParams struct {
	Email string `json:"email"`
	Crypt string `json:"crypt"`
}

func (q *Queries) GetGovernmentByLogin(ctx context.Context, arg GetGovernmentByLoginParams) (Government, error) {
	row := q.db.QueryRow(ctx, getGovernmentByLogin, arg.Email, arg.Crypt)
	var i Government
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getGovernmentEnrollmentRequestByID = `-- name: GetGovernmentEnrollmentRequestByID :one
SELECT created_at, updated_at, id, institution_id, pending, approved
FROM government_enrollment_request
WHERE id = $1
`

func (q *Queries) GetGovernmentEnrollmentRequestByID(ctx context.Context, id pgtype.UUID) (GovernmentEnrollmentRequest, error) {
	row := q.db.QueryRow(ctx, getGovernmentEnrollmentRequestByID, id)
	var i GovernmentEnrollmentRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const getHealthRecordByID = `-- name: GetHealthRecordByID :one
SELECT created_at, updated_at, id, patient_id, author, title, description, private_key, public_key, type, specialty_id, content_format 
FROM health_record
WHERE id = $1
`

func (q *Queries) GetHealthRecordByID(ctx context.Context, id pgtype.UUID) (HealthRecord, error) {
	row := q.db.QueryRow(ctx, getHealthRecordByID, id)
	var i HealthRecord
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PatientID,
		&i.Author,
		&i.Title,
		&i.Description,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Type,
		&i.SpecialtyID,
		&i.ContentFormat,
	)
	return i, err
}

const getInstitutionByGovID = `-- name: GetInstitutionByGovID :one
SELECT created_at, updated_at, id, name, address, credentials, type, gov_id, pending
FROM institution
WHERE gov_id = $1
`

func (q *Queries) GetInstitutionByGovID(ctx context.Context, govID string) (Institution, error) {
	row := q.db.QueryRow(ctx, getInstitutionByGovID, govID)
	var i Institution
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Credentials,
		&i.Type,
		&i.GovID,
		&i.Pending,
	)
	return i, err
}

const getInstitutionEnrollmentRequestByDoctorIDAndInstitutionID = `-- name: GetInstitutionEnrollmentRequestByDoctorIDAndInstitutionID :one
SELECT created_at, updated_at, id, institution_id, doctor_id, nurse_id, pending, approved
FROM institution_enrollment_request
WHERE doctor_id = $1 AND institution_id = $2
`

type GetInstitutionEnrollmentRequestByDoctorIDAndInstitutionIDParams struct {
	DoctorID      pgtype.UUID `json:"doctorId"`
	InstitutionID pgtype.UUID `json:"institutionId"`
}

func (q *Queries) GetInstitutionEnrollmentRequestByDoctorIDAndInstitutionID(ctx context.Context, arg GetInstitutionEnrollmentRequestByDoctorIDAndInstitutionIDParams) (InstitutionEnrollmentRequest, error) {
	row := q.db.QueryRow(ctx, getInstitutionEnrollmentRequestByDoctorIDAndInstitutionID, arg.DoctorID, arg.InstitutionID)
	var i InstitutionEnrollmentRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.DoctorID,
		&i.NurseID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const getInstitutionEnrollmentRequestsByID = `-- name: GetInstitutionEnrollmentRequestsByID :one
SELECT created_at, updated_at, id, institution_id, doctor_id, nurse_id, pending, approved
FROM institution_enrollment_request
WHERE id = $1
`

func (q *Queries) GetInstitutionEnrollmentRequestsByID(ctx context.Context, id pgtype.UUID) (InstitutionEnrollmentRequest, error) {
	row := q.db.QueryRow(ctx, getInstitutionEnrollmentRequestsByID, id)
	var i InstitutionEnrollmentRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.DoctorID,
		&i.NurseID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const getInstitutionUserByGovAndInstitutionID = `-- name: GetInstitutionUserByGovAndInstitutionID :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, role
FROM institution_user
WHERE gov_id = $1 AND institution_id = $2
`

type GetInstitutionUserByGovAndInstitutionIDParams struct {
	GovID         string      `json:"govId"`
	InstitutionID pgtype.UUID `json:"institutionId"`
}

func (q *Queries) GetInstitutionUserByGovAndInstitutionID(ctx context.Context, arg GetInstitutionUserByGovAndInstitutionIDParams) (InstitutionUser, error) {
	row := q.db.QueryRow(ctx, getInstitutionUserByGovAndInstitutionID, arg.GovID, arg.InstitutionID)
	var i InstitutionUser
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const getInstitutionUserByID = `-- name: GetInstitutionUserByID :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, role
FROM institution_user
WHERE id = $1
`

func (q *Queries) GetInstitutionUserByID(ctx context.Context, id pgtype.UUID) ([]InstitutionUser, error) {
	rows, err := q.db.Query(ctx, getInstitutionUserByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionUser
	for rows.Next() {
		var i InstitutionUser
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInstitutionUserByLogin = `-- name: GetInstitutionUserByLogin :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, role
FROM institution_user
WHERE email = $1 AND password = crypt($2, password)
`

type GetInstitutionUserByLoginParams struct {
	Email string `json:"email"`
	Crypt string `json:"crypt"`
}

func (q *Queries) GetInstitutionUserByLogin(ctx context.Context, arg GetInstitutionUserByLoginParams) (InstitutionUser, error) {
	row := q.db.QueryRow(ctx, getInstitutionUserByLogin, arg.Email, arg.Crypt)
	var i InstitutionUser
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const getNurseByID = `-- name: GetNurseByID :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, sex, email, password, phone_number, credentials, pending
FROM nurse
WHERE id = $1
`

// SELECT  FROM InstitutionUserRole WHERE 1;
// INSERT INTO InstitutionUserRole() VALUES ();
// UPDATE InstitutionUserRole SET  WHERE 1;
// DELETE FROM institution_user_role WHERE id = $1;
func (q *Queries) GetNurseByID(ctx context.Context, id pgtype.UUID) (Nurse, error) {
	row := q.db.QueryRow(ctx, getNurseByID, id)
	var i Nurse
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Sex,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
	)
	return i, err
}

const getNurseByLogin = `-- name: GetNurseByLogin :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, sex, email, password, phone_number, credentials, pending
FROM nurse
WHERE email = $1 AND password = crypt($2, password)
`

type GetNurseByLoginParams struct {
	Email string `json:"email"`
	Crypt string `json:"crypt"`
}

func (q *Queries) GetNurseByLogin(ctx context.Context, arg GetNurseByLoginParams) (Nurse, error) {
	row := q.db.QueryRow(ctx, getNurseByLogin, arg.Email, arg.Crypt)
	var i Nurse
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Sex,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
	)
	return i, err
}

const getPatientByGovID = `-- name: GetPatientByGovID :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
FROM patient
WHERE gov_id = $1
`

func (q *Queries) GetPatientByGovID(ctx context.Context, govID string) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByGovID, govID)
	var i Patient
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Sex,
		&i.Pending,
		&i.Status,
		&i.Bed,
	)
	return i, err
}

const getPatientByID = `-- name: GetPatientByID :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
FROM patient
WHERE id = $1
`

func (q *Queries) GetPatientByID(ctx context.Context, id pgtype.UUID) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByID, id)
	var i Patient
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Sex,
		&i.Pending,
		&i.Status,
		&i.Bed,
	)
	return i, err
}

const getPatientByLogin = `-- name: GetPatientByLogin :one
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
FROM patient
WHERE email = $1 AND password = crypt($2, password)
`

type GetPatientByLoginParams struct {
	Email string `json:"email"`
	Crypt string `json:"crypt"`
}

func (q *Queries) GetPatientByLogin(ctx context.Context, arg GetPatientByLoginParams) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByLogin, arg.Email, arg.Crypt)
	var i Patient
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Sex,
		&i.Pending,
		&i.Status,
		&i.Bed,
	)
	return i, err
}

const getSpecialtyByID = `-- name: GetSpecialtyByID :one
SELECT created_at, updated_at, id, description, name
FROM specialty
WHERE id = $1
`

func (q *Queries) GetSpecialtyByID(ctx context.Context, id pgtype.UUID) (Specialty, error) {
	row := q.db.QueryRow(ctx, getSpecialtyByID, id)
	var i Specialty
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Description,
		&i.Name,
	)
	return i, err
}

const listAccessRequestsByDoctorID = `-- name: ListAccessRequestsByDoctorID :many
SELECT created_at, updated_at, id, patient_id, doctor_id, pending, approved
FROM doctor_access_request
WHERE doctor_id = $1
`

func (q *Queries) ListAccessRequestsByDoctorID(ctx context.Context, doctorID pgtype.UUID) ([]DoctorAccessRequest, error) {
	rows, err := q.db.Query(ctx, listAccessRequestsByDoctorID, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DoctorAccessRequest
	for rows.Next() {
		var i DoctorAccessRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.PatientID,
			&i.DoctorID,
			&i.Pending,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccessRequestsByPatientID = `-- name: ListAccessRequestsByPatientID :many
SELECT created_at, updated_at, id, patient_id, doctor_id, pending, approved
FROM doctor_access_request
WHERE patient_id = $1
`

func (q *Queries) ListAccessRequestsByPatientID(ctx context.Context, patientID pgtype.UUID) ([]DoctorAccessRequest, error) {
	rows, err := q.db.Query(ctx, listAccessRequestsByPatientID, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DoctorAccessRequest
	for rows.Next() {
		var i DoctorAccessRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.PatientID,
			&i.DoctorID,
			&i.Pending,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApprovedAccessRequestsByPatientID = `-- name: ListApprovedAccessRequestsByPatientID :many
SELECT created_at, updated_at, id, patient_id, doctor_id, pending, approved
FROM doctor_access_request
WHERE patient_id = $1 AND approved = TRUE
`

func (q *Queries) ListApprovedAccessRequestsByPatientID(ctx context.Context, patientID pgtype.UUID) ([]DoctorAccessRequest, error) {
	rows, err := q.db.Query(ctx, listApprovedAccessRequestsByPatientID, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DoctorAccessRequest
	for rows.Next() {
		var i DoctorAccessRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.PatientID,
			&i.DoctorID,
			&i.Pending,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApprovedInstitutions = `-- name: ListApprovedInstitutions :many
SELECT created_at, updated_at, id, name, address, credentials, type, gov_id, pending
FROM institution
WHERE id IN (
        SELECT institution_id
        FROM government_enrollment_request
        WHERE approved = TRUE
    )
`

func (q *Queries) ListApprovedInstitutions(ctx context.Context) ([]Institution, error) {
	rows, err := q.db.Query(ctx, listApprovedInstitutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Institution
	for rows.Next() {
		var i Institution
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Credentials,
			&i.Type,
			&i.GovID,
			&i.Pending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctors = `-- name: ListDoctors :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, sex, password, phone_number, credentials, pending, patient_pending
FROM doctor
`

func (q *Queries) ListDoctors(ctx context.Context) ([]Doctor, error) {
	rows, err := q.db.Query(ctx, listDoctors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doctor
	for rows.Next() {
		var i Doctor
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Email,
			&i.Sex,
			&i.Password,
			&i.PhoneNumber,
			&i.Credentials,
			&i.Pending,
			&i.PatientPending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorsByInstitutionID = `-- name: ListDoctorsByInstitutionID :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, sex, password, phone_number, credentials, pending, patient_pending
FROM doctor
WHERE institution_id = $1
`

func (q *Queries) ListDoctorsByInstitutionID(ctx context.Context, institutionID pgtype.UUID) ([]Doctor, error) {
	rows, err := q.db.Query(ctx, listDoctorsByInstitutionID, institutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doctor
	for rows.Next() {
		var i Doctor
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Email,
			&i.Sex,
			&i.Password,
			&i.PhoneNumber,
			&i.Credentials,
			&i.Pending,
			&i.PatientPending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGovernmentEnrollmentRequests = `-- name: ListGovernmentEnrollmentRequests :many
SELECT created_at, updated_at, id, institution_id, pending, approved
FROM government_enrollment_request
`

func (q *Queries) ListGovernmentEnrollmentRequests(ctx context.Context) ([]GovernmentEnrollmentRequest, error) {
	rows, err := q.db.Query(ctx, listGovernmentEnrollmentRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GovernmentEnrollmentRequest
	for rows.Next() {
		var i GovernmentEnrollmentRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Pending,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHealthRecordsByPatientID = `-- name: ListHealthRecordsByPatientID :many
SELECT created_at, updated_at, id, patient_id, author, title, description, private_key, public_key, type, specialty_id, content_format
FROM health_record
WHERE patient_id = $1
`

func (q *Queries) ListHealthRecordsByPatientID(ctx context.Context, patientID pgtype.UUID) ([]HealthRecord, error) {
	rows, err := q.db.Query(ctx, listHealthRecordsByPatientID, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HealthRecord
	for rows.Next() {
		var i HealthRecord
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.PatientID,
			&i.Author,
			&i.Title,
			&i.Description,
			&i.PrivateKey,
			&i.PublicKey,
			&i.Type,
			&i.SpecialtyID,
			&i.ContentFormat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHealthRecordsBySpecialtyAndPatientID = `-- name: ListHealthRecordsBySpecialtyAndPatientID :many
SELECT created_at, updated_at, id, patient_id, author, title, description, private_key, public_key, type, specialty_id, content_format
FROM health_record
WHERE specialty_id = $1
    AND patient_id = $2
`

type ListHealthRecordsBySpecialtyAndPatientIDParams struct {
	SpecialtyID pgtype.UUID `json:"specialtyId"`
	PatientID   pgtype.UUID `json:"patientId"`
}

func (q *Queries) ListHealthRecordsBySpecialtyAndPatientID(ctx context.Context, arg ListHealthRecordsBySpecialtyAndPatientIDParams) ([]HealthRecord, error) {
	rows, err := q.db.Query(ctx, listHealthRecordsBySpecialtyAndPatientID, arg.SpecialtyID, arg.PatientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HealthRecord
	for rows.Next() {
		var i HealthRecord
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.PatientID,
			&i.Author,
			&i.Title,
			&i.Description,
			&i.PrivateKey,
			&i.PublicKey,
			&i.Type,
			&i.SpecialtyID,
			&i.ContentFormat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHealthRecordsBySpecialtyID = `-- name: ListHealthRecordsBySpecialtyID :many
SELECT created_at, updated_at, id, patient_id, author, title, description, private_key, public_key, type, specialty_id, content_format
FROM health_record
WHERE specialty_id = $1
`

func (q *Queries) ListHealthRecordsBySpecialtyID(ctx context.Context, specialtyID pgtype.UUID) ([]HealthRecord, error) {
	rows, err := q.db.Query(ctx, listHealthRecordsBySpecialtyID, specialtyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HealthRecord
	for rows.Next() {
		var i HealthRecord
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.PatientID,
			&i.Author,
			&i.Title,
			&i.Description,
			&i.PrivateKey,
			&i.PublicKey,
			&i.Type,
			&i.SpecialtyID,
			&i.ContentFormat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHealthRecordsByTypeAndPatientID = `-- name: ListHealthRecordsByTypeAndPatientID :many
SELECT created_at, updated_at, id, patient_id, author, title, description, private_key, public_key, type, specialty_id, content_format
FROM health_record
WHERE type = $1
    AND patient_id = $2
`

type ListHealthRecordsByTypeAndPatientIDParams struct {
	Type      string      `json:"type"`
	PatientID pgtype.UUID `json:"patientId"`
}

func (q *Queries) ListHealthRecordsByTypeAndPatientID(ctx context.Context, arg ListHealthRecordsByTypeAndPatientIDParams) ([]HealthRecord, error) {
	rows, err := q.db.Query(ctx, listHealthRecordsByTypeAndPatientID, arg.Type, arg.PatientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HealthRecord
	for rows.Next() {
		var i HealthRecord
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.PatientID,
			&i.Author,
			&i.Title,
			&i.Description,
			&i.PrivateKey,
			&i.PublicKey,
			&i.Type,
			&i.SpecialtyID,
			&i.ContentFormat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstitutionEnrollmentRequestByDoctorID = `-- name: ListInstitutionEnrollmentRequestByDoctorID :many
SELECT created_at, updated_at, id, institution_id, doctor_id, nurse_id, pending, approved
FROM institution_enrollment_request
WHERE doctor_id = $1
`

func (q *Queries) ListInstitutionEnrollmentRequestByDoctorID(ctx context.Context, doctorID pgtype.UUID) ([]InstitutionEnrollmentRequest, error) {
	rows, err := q.db.Query(ctx, listInstitutionEnrollmentRequestByDoctorID, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionEnrollmentRequest
	for rows.Next() {
		var i InstitutionEnrollmentRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.DoctorID,
			&i.NurseID,
			&i.Pending,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstitutionEnrollmentRequestByNurseID = `-- name: ListInstitutionEnrollmentRequestByNurseID :many
SELECT created_at, updated_at, id, institution_id, doctor_id, nurse_id, pending, approved
FROM institution_enrollment_request
WHERE nurse_id = $1
`

func (q *Queries) ListInstitutionEnrollmentRequestByNurseID(ctx context.Context, nurseID pgtype.UUID) ([]InstitutionEnrollmentRequest, error) {
	rows, err := q.db.Query(ctx, listInstitutionEnrollmentRequestByNurseID, nurseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionEnrollmentRequest
	for rows.Next() {
		var i InstitutionEnrollmentRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.DoctorID,
			&i.NurseID,
			&i.Pending,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstitutionEnrollmentRequestsByInstitutionID = `-- name: ListInstitutionEnrollmentRequestsByInstitutionID :many
SELECT created_at, updated_at, id, institution_id, doctor_id, nurse_id, pending, approved
FROM institution_enrollment_request
WHERE institution_id = $1
`

func (q *Queries) ListInstitutionEnrollmentRequestsByInstitutionID(ctx context.Context, institutionID pgtype.UUID) ([]InstitutionEnrollmentRequest, error) {
	rows, err := q.db.Query(ctx, listInstitutionEnrollmentRequestsByInstitutionID, institutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionEnrollmentRequest
	for rows.Next() {
		var i InstitutionEnrollmentRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.DoctorID,
			&i.NurseID,
			&i.Pending,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstitutionUserByInstitutionID = `-- name: ListInstitutionUserByInstitutionID :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, role
FROM institution_user
WHERE institution_id = $1
`

func (q *Queries) ListInstitutionUserByInstitutionID(ctx context.Context, institutionID pgtype.UUID) ([]InstitutionUser, error) {
	rows, err := q.db.Query(ctx, listInstitutionUserByInstitutionID, institutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionUser
	for rows.Next() {
		var i InstitutionUser
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstitutions = `-- name: ListInstitutions :many
SELECT created_at, updated_at, id, name, address, credentials, type, gov_id, pending
FROM institution
`

func (q *Queries) ListInstitutions(ctx context.Context) ([]Institution, error) {
	rows, err := q.db.Query(ctx, listInstitutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Institution
	for rows.Next() {
		var i Institution
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Credentials,
			&i.Type,
			&i.GovID,
			&i.Pending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNurses = `-- name: ListNurses :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, sex, email, password, phone_number, credentials, pending
FROM nurse
`

func (q *Queries) ListNurses(ctx context.Context) ([]Nurse, error) {
	rows, err := q.db.Query(ctx, listNurses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nurse
	for rows.Next() {
		var i Nurse
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Sex,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Credentials,
			&i.Pending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNursesByInstitutionID = `-- name: ListNursesByInstitutionID :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, sex, email, password, phone_number, credentials, pending
FROM nurse
WHERE institution_id = $1
`

func (q *Queries) ListNursesByInstitutionID(ctx context.Context, institutionID pgtype.UUID) ([]Nurse, error) {
	rows, err := q.db.Query(ctx, listNursesByInstitutionID, institutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nurse
	for rows.Next() {
		var i Nurse
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Sex,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Credentials,
			&i.Pending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatients = `-- name: ListPatients :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
FROM patient
`

func (q *Queries) ListPatients(ctx context.Context) ([]Patient, error) {
	rows, err := q.db.Query(ctx, listPatients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Sex,
			&i.Pending,
			&i.Status,
			&i.Bed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientsTreatedByDoctorID = `-- name: ListPatientsTreatedByDoctorID :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
FROM patient
WHERE id = ANY(
    SELECT patient_id 
    FROM doctor_access_request 
    WHERE doctor_id = $1
)
`

func (q *Queries) ListPatientsTreatedByDoctorID(ctx context.Context, doctorID pgtype.UUID) ([]Patient, error) {
	rows, err := q.db.Query(ctx, listPatientsTreatedByDoctorID, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Sex,
			&i.Pending,
			&i.Status,
			&i.Bed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientsTreatedByDoctorIDWithHealthRecordOfSpecialtyID = `-- name: ListPatientsTreatedByDoctorIDWithHealthRecordOfSpecialtyID :many
SELECT created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
FROM patient
WHERE id = ANY(
    SELECT patient_id 
    FROM doctor_access_request 
    WHERE doctor_id = $1
) AND
(
    SELECT COUNT(*) 
    FROM health_record 
    WHERE specialty_id = $2
) > 0
`

type ListPatientsTreatedByDoctorIDWithHealthRecordOfSpecialtyIDParams struct {
	DoctorID    pgtype.UUID `json:"doctorId"`
	SpecialtyID pgtype.UUID `json:"specialtyId"`
}

func (q *Queries) ListPatientsTreatedByDoctorIDWithHealthRecordOfSpecialtyID(ctx context.Context, arg ListPatientsTreatedByDoctorIDWithHealthRecordOfSpecialtyIDParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, listPatientsTreatedByDoctorIDWithHealthRecordOfSpecialtyID, arg.DoctorID, arg.SpecialtyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.InstitutionID,
			&i.Firstname,
			&i.Lastname,
			&i.GovID,
			&i.Birthdate,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Sex,
			&i.Pending,
			&i.Status,
			&i.Bed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecialties = `-- name: ListSpecialties :many
SELECT created_at, updated_at, id, description, name
FROM specialty
`

func (q *Queries) ListSpecialties(ctx context.Context) ([]Specialty, error) {
	rows, err := q.db.Query(ctx, listSpecialties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialty
	for rows.Next() {
		var i Specialty
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.Description,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecialtyDoctorJunctionsByDoctorID = `-- name: ListSpecialtyDoctorJunctionsByDoctorID :many
SELECT doctor_id, specialty_id
FROM doctor_specialty
WHERE doctor_id = $1
`

func (q *Queries) ListSpecialtyDoctorJunctionsByDoctorID(ctx context.Context, doctorID pgtype.UUID) ([]DoctorSpecialty, error) {
	rows, err := q.db.Query(ctx, listSpecialtyDoctorJunctionsByDoctorID, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DoctorSpecialty
	for rows.Next() {
		var i DoctorSpecialty
		if err := rows.Scan(&i.DoctorID, &i.SpecialtyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecialtyDoctorJunctionsBySpecialtyID = `-- name: ListSpecialtyDoctorJunctionsBySpecialtyID :many
SELECT doctor_id, specialty_id
FROM doctor_specialty
WHERE specialty_id = $1
`

func (q *Queries) ListSpecialtyDoctorJunctionsBySpecialtyID(ctx context.Context, specialtyID pgtype.UUID) ([]DoctorSpecialty, error) {
	rows, err := q.db.Query(ctx, listSpecialtyDoctorJunctionsBySpecialtyID, specialtyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DoctorSpecialty
	for rows.Next() {
		var i DoctorSpecialty
		if err := rows.Scan(&i.DoctorID, &i.SpecialtyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccessRequestByID = `-- name: UpdateAccessRequestByID :one
UPDATE doctor_access_request
SET patient_id = $1,
    doctor_id = $2,
    pending = $3,
    approved = $4
WHERE id = $5
RETURNING created_at, updated_at, id, patient_id, doctor_id, pending, approved
`

type UpdateAccessRequestByIDParams struct {
	PatientID pgtype.UUID `json:"patientId"`
	DoctorID  pgtype.UUID `json:"doctorId"`
	Pending   bool        `json:"pending"`
	Approved  bool        `json:"approved"`
	ID        pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateAccessRequestByID(ctx context.Context, arg UpdateAccessRequestByIDParams) (DoctorAccessRequest, error) {
	row := q.db.QueryRow(ctx, updateAccessRequestByID,
		arg.PatientID,
		arg.DoctorID,
		arg.Pending,
		arg.Approved,
		arg.ID,
	)
	var i DoctorAccessRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PatientID,
		&i.DoctorID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const updateDoctorByID = `-- name: UpdateDoctorByID :one
UPDATE doctor
SET institution_id = $1,
    firstname = $2,
    lastname = $3,
    gov_id = $4,
    birthdate = $5,
    password = crypt($6, gen_salt('bf')),
    email = $7,
    phone_number = $8,
    credentials = $9,
    pending = $10,
    patient_pending = $11,
    sex = $12
WHERE id = $13
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, sex, password, phone_number, credentials, pending, patient_pending
`

type UpdateDoctorByIDParams struct {
	InstitutionID  pgtype.UUID      `json:"institutionId"`
	Firstname      string           `json:"firstname"`
	Lastname       string           `json:"lastname"`
	GovID          string           `json:"govId"`
	Birthdate      pgtype.Timestamp `json:"birthdate"`
	Crypt          string           `json:"crypt"`
	Email          string           `json:"email"`
	PhoneNumber    string           `json:"phoneNumber"`
	Credentials    string           `json:"credentials"`
	Pending        bool             `json:"pending"`
	PatientPending bool             `json:"patientPending"`
	Sex            string           `json:"sex"`
	ID             pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateDoctorByID(ctx context.Context, arg UpdateDoctorByIDParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, updateDoctorByID,
		arg.InstitutionID,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Crypt,
		arg.Email,
		arg.PhoneNumber,
		arg.Credentials,
		arg.Pending,
		arg.PatientPending,
		arg.Sex,
		arg.ID,
	)
	var i Doctor
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Sex,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
		&i.PatientPending,
	)
	return i, err
}

const updateGovernmentByID = `-- name: UpdateGovernmentByID :one
UPDATE government
SET email = $1,
    password = $2
WHERE id = $3
RETURNING created_at, updated_at, id, email, password
`

type UpdateGovernmentByIDParams struct {
	Email    string      `json:"email"`
	Password string      `json:"password"`
	ID       pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateGovernmentByID(ctx context.Context, arg UpdateGovernmentByIDParams) (Government, error) {
	row := q.db.QueryRow(ctx, updateGovernmentByID, arg.Email, arg.Password, arg.ID)
	var i Government
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateGovernmentEnrollmentRequestsByID = `-- name: UpdateGovernmentEnrollmentRequestsByID :one
UPDATE government_enrollment_request
SET institution_id = $1,
    pending = $2,
    approved = $3
WHERE id = $4
RETURNING created_at, updated_at, id, institution_id, pending, approved
`

type UpdateGovernmentEnrollmentRequestsByIDParams struct {
	InstitutionID pgtype.UUID `json:"institutionId"`
	Pending       bool        `json:"pending"`
	Approved      bool        `json:"approved"`
	ID            pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateGovernmentEnrollmentRequestsByID(ctx context.Context, arg UpdateGovernmentEnrollmentRequestsByIDParams) (GovernmentEnrollmentRequest, error) {
	row := q.db.QueryRow(ctx, updateGovernmentEnrollmentRequestsByID,
		arg.InstitutionID,
		arg.Pending,
		arg.Approved,
		arg.ID,
	)
	var i GovernmentEnrollmentRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const updateInstitutionByID = `-- name: UpdateInstitutionByID :one
UPDATE institution
SET name = $1,
    address = $2,
    credentials = $3,
    type = $4,
    gov_id = $5,
    pending = $6
WHERE id = $7
RETURNING created_at, updated_at, id, name, address, credentials, type, gov_id, pending
`

type UpdateInstitutionByIDParams struct {
	Name        string      `json:"name"`
	Address     string      `json:"address"`
	Credentials string      `json:"credentials"`
	Type        string      `json:"type"`
	GovID       string      `json:"govId"`
	Pending     bool        `json:"pending"`
	ID          pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateInstitutionByID(ctx context.Context, arg UpdateInstitutionByIDParams) (Institution, error) {
	row := q.db.QueryRow(ctx, updateInstitutionByID,
		arg.Name,
		arg.Address,
		arg.Credentials,
		arg.Type,
		arg.GovID,
		arg.Pending,
		arg.ID,
	)
	var i Institution
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Credentials,
		&i.Type,
		&i.GovID,
		&i.Pending,
	)
	return i, err
}

const updateInstitutionEnrollmentRequestByID = `-- name: UpdateInstitutionEnrollmentRequestByID :one
UPDATE institution_enrollment_request
SET institution_id = $1,
    doctor_id = $2,
    nurse_id = $3,
    pending = $4,
    approved = $5
WHERE id = $6
RETURNING created_at, updated_at, id, institution_id, doctor_id, nurse_id, pending, approved
`

type UpdateInstitutionEnrollmentRequestByIDParams struct {
	InstitutionID pgtype.UUID `json:"institutionId"`
	DoctorID      pgtype.UUID `json:"doctorId"`
	NurseID       pgtype.UUID `json:"nurseId"`
	Pending       bool        `json:"pending"`
	Approved      bool        `json:"approved"`
	ID            pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateInstitutionEnrollmentRequestByID(ctx context.Context, arg UpdateInstitutionEnrollmentRequestByIDParams) (InstitutionEnrollmentRequest, error) {
	row := q.db.QueryRow(ctx, updateInstitutionEnrollmentRequestByID,
		arg.InstitutionID,
		arg.DoctorID,
		arg.NurseID,
		arg.Pending,
		arg.Approved,
		arg.ID,
	)
	var i InstitutionEnrollmentRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.DoctorID,
		&i.NurseID,
		&i.Pending,
		&i.Approved,
	)
	return i, err
}

const updateInstitutionUserByGovID = `-- name: UpdateInstitutionUserByGovID :one
UPDATE institution_user
SET firstname = $2,
    lastname = $3,
    birthdate = $5,
    email = $6,
    password = crypt($7, gen_salt('bf')),
    phone_number = $8,
    role = $9
WHERE gov_id = $4 AND institution_id = $1
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, role
`

type UpdateInstitutionUserByGovIDParams struct {
	InstitutionID pgtype.UUID      `json:"institutionId"`
	Firstname     string           `json:"firstname"`
	Lastname      string           `json:"lastname"`
	GovID         string           `json:"govId"`
	Birthdate     pgtype.Timestamp `json:"birthdate"`
	Email         string           `json:"email"`
	Crypt         string           `json:"crypt"`
	PhoneNumber   string           `json:"phoneNumber"`
	Role          string           `json:"role"`
}

func (q *Queries) UpdateInstitutionUserByGovID(ctx context.Context, arg UpdateInstitutionUserByGovIDParams) (InstitutionUser, error) {
	row := q.db.QueryRow(ctx, updateInstitutionUserByGovID,
		arg.InstitutionID,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Email,
		arg.Crypt,
		arg.PhoneNumber,
		arg.Role,
	)
	var i InstitutionUser
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const updateNurseByID = `-- name: UpdateNurseByID :one
UPDATE nurse
SET institution_id = $1,
    firstname = $2,
    lastname = $3,
    gov_id = $4,
    birthdate = $5,
    email = $6,
    phone_number = $7,
    credentials = $8,
    password = crypt($9, gen_salt('bf')),
    pending = $10,
    sex = $11
WHERE id = $12
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, sex, email, password, phone_number, credentials, pending
`

type UpdateNurseByIDParams struct {
	InstitutionID pgtype.UUID      `json:"institutionId"`
	Firstname     string           `json:"firstname"`
	Lastname      string           `json:"lastname"`
	GovID         string           `json:"govId"`
	Birthdate     pgtype.Timestamp `json:"birthdate"`
	Email         string           `json:"email"`
	PhoneNumber   string           `json:"phoneNumber"`
	Credentials   string           `json:"credentials"`
	Crypt         string           `json:"crypt"`
	Pending       bool             `json:"pending"`
	Sex           string           `json:"sex"`
	ID            pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateNurseByID(ctx context.Context, arg UpdateNurseByIDParams) (Nurse, error) {
	row := q.db.QueryRow(ctx, updateNurseByID,
		arg.InstitutionID,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Email,
		arg.PhoneNumber,
		arg.Credentials,
		arg.Crypt,
		arg.Pending,
		arg.Sex,
		arg.ID,
	)
	var i Nurse
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Sex,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Credentials,
		&i.Pending,
	)
	return i, err
}

const updatePatientByID = `-- name: UpdatePatientByID :one
UPDATE patient
SET firstname = $1,
    lastname = $2,
    gov_id = $3,
    birthdate = $4,
    email = $5,
    password =  crypt($6, password),
    phone_number = $7,
    sex = $8,
    pending = $9,
    status = $10,
    bed = $11
WHERE id = $12
RETURNING created_at, updated_at, id, institution_id, firstname, lastname, gov_id, birthdate, email, password, phone_number, sex, pending, status, bed
`

type UpdatePatientByIDParams struct {
	Firstname   string           `json:"firstname"`
	Lastname    string           `json:"lastname"`
	GovID       string           `json:"govId"`
	Birthdate   pgtype.Timestamp `json:"birthdate"`
	Email       string           `json:"email"`
	Crypt       string           `json:"crypt"`
	PhoneNumber string           `json:"phoneNumber"`
	Sex         string           `json:"sex"`
	Pending     bool             `json:"pending"`
	Status      string           `json:"status"`
	Bed         string           `json:"bed"`
	ID          pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdatePatientByID(ctx context.Context, arg UpdatePatientByIDParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatientByID,
		arg.Firstname,
		arg.Lastname,
		arg.GovID,
		arg.Birthdate,
		arg.Email,
		arg.Crypt,
		arg.PhoneNumber,
		arg.Sex,
		arg.Pending,
		arg.Status,
		arg.Bed,
		arg.ID,
	)
	var i Patient
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.InstitutionID,
		&i.Firstname,
		&i.Lastname,
		&i.GovID,
		&i.Birthdate,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Sex,
		&i.Pending,
		&i.Status,
		&i.Bed,
	)
	return i, err
}

const updateSpecialtyByID = `-- name: UpdateSpecialtyByID :one
UPDATE specialty
SET description = $1,
    name = $2
WHERE id = $3
RETURNING created_at, updated_at, id, description, name
`

type UpdateSpecialtyByIDParams struct {
	Description string        `json:"description"`
	Name        SpecialtyName `json:"name"`
	ID          pgtype.UUID   `json:"id"`
}

func (q *Queries) UpdateSpecialtyByID(ctx context.Context, arg UpdateSpecialtyByIDParams) (Specialty, error) {
	row := q.db.QueryRow(ctx, updateSpecialtyByID, arg.Description, arg.Name, arg.ID)
	var i Specialty
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.Description,
		&i.Name,
	)
	return i, err
}
