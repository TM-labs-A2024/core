openapi: 3.0.3
info:
  title: Core Server - TM LABS EMR
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 1.0.11
tags:
  - name: doctor
  - name: patient
  - name: institution
  - name: institutionUser
paths:
  /doctors:
    put:
      tags:
        - doctor
      summary: Update an existing doctor
      description: Update an existing doctor by Id
      operationId: updateDoctor
      requestBody:
        description: Update an existent doctor in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Doctor not found
        "422":
          description: Validation exception
    post:
      tags:
        - doctor
      summary: Add a new doctor to the store
      description: Add a new doctor to the store
      operationId: addDoctor
      requestBody:
        description: Create a new doctor in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /doctors/{doctorUuid}:
    get:
      tags:
        - doctor
      summary: Find doctor by UUID
      description: Returns a single doctor
      operationId: getDoctorById
      parameters:
        - name: doctorUuid
          in: path
          description: UUID of doctor to return
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Doctor not found
    delete:
      tags:
        - doctor
      summary: Deletes a doctor
      description: delete a doctor
      operationId: deleteDoctor
      parameters:
        - name: doctorUuid
          in: path
          description: Doctor id to delete
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "400":
          description: Invalid doctor value
  /doctors/{doctorUuid}/patients:
    get:
      tags:
        - doctor
      summary: Find patients by doctor UUID
      description: Returns a list of patients
      operationId: getPatientsByDoctorId
      parameters:
        - name: doctorUuid
          in: path
          description: UUID of doctor to return
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Doctor not found
  /patients:
    put:
      tags:
        - patient
      summary: Update an existing patient
      description: Update an existing patient by Id
      operationId: updateDoctor
      requestBody:
        description: Update an existent patient in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Doctor not found
        "422":
          description: Validation exception
    post:
      tags:
        - patient
      summary: Add a new patient to the store
      description: Add a new patient to the store
      operationId: addDoctor
      requestBody:
        description: Create a new patient in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /patients/{patientUuid}:
    get:
      tags:
        - patient
      summary: Find patient by UUID
      description: Returns a single patient
      operationId: getDoctorById
      parameters:
        - name: patientUuid
          in: path
          description: UUID of patient to return
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Doctor not found
    delete:
      tags:
        - patient
      summary: Deletes a patient
      description: delete a patient
      operationId: deleteDoctor
      parameters:
        - name: patientUuid
          in: path
          description: Doctor id to delete
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "400":
          description: Invalid patient value
  /patients/{patientUuid}/doctors:
    get:
      tags:
        - patient
      summary: Find doctors by patient UUID
      description: Returns a list of patients
      operationId: getPatientsByDoctorId
      parameters:
        - name: patientUuid
          in: path
          description: UUID of patient to return
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Doctor not found
  /institution:
    put:
      tags:
        - institution
      summary: Update an existing institution
      description: Update an existing institution by Id
      operationId: updateDoctor
      requestBody:
        description: Update an existent institution in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Institution"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Institution"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Institution not found
        "422":
          description: Validation exception
    post:
      tags:
        - institution
      summary: Add a new institution to the store
      description: Add a new institution to the store
      operationId: addInstitution
      requestBody:
        description: Create a new institution in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Institution"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Institution"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /institution/{institutionUuid}:
    get:
      tags:
        - institution
      summary: Find institution by UUID
      description: Returns a single institution
      operationId: getInstitutionById
      parameters:
        - name: institutionUuid
          in: path
          description: UUID of institution to return
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Institution"
        "400":
          description: Invalid UUID supplied
        "404":
          description: Institution not found
    delete:
      tags:
        - institution
      summary: Deletes a institution
      description: delete a institution
      operationId: deleteInstitution
      parameters:
        - name: institutionUuid
          in: path
          description: Institution id to delete
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "400":
          description: Invalid institution value
  /institution/user:
    put:
      tags:
        - institution
      summary: Update an existing institution user
      description: Update an existing institution user by Id
      operationId: updateDoctor
      requestBody:
        description: Update an existent institution user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstitutionUser"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstitutionUser"
        "400":
          description: Invalid UUID supplied
        "404":
          description: InstitutionUser not found
        "422":
          description: Validation exception
    post:
      tags:
        - institution
      summary: Add a new institution user to the store
      description: Add a new institution user to the store
      operationId: addInstitutionUser
      requestBody:
        description: Create a new institution user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstitutionUser"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstitutionUser"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /institution/user/{userUuid}:
    get:
      tags:
        - institution
      summary: Find institution user by UUID
      description: Returns a single institution
      operationId: getInstitutionUserById
      parameters:
        - name: institutionUuid
          in: path
          description: UUID of institution user to return
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstitutionUser"
        "400":
          description: Invalid UUID supplied
        "404":
          description: InstitutionUser not found
    delete:
      tags:
        - institution
      summary: Deletes a institution
      description: delete a institution
      operationId: deleteInstitutionUser
      parameters:
        - name: institutionUuid
          in: path
          description: InstitutionUser id to delete
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "400":
          description: Invalid institution user value

components:
  schemas:
    Doctor:
      required:
        - fullaname
        - govId
        - birthdate
        - specialty
        - email
        - phoneNumber
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/UUID"
        fullaname:
          type: string
          example: José Feliciano Gutierrez García
        govId:
          type: string
          example: E99885566
        birthdate:
          type: string
          format: date
          example: "1197-08-20"
        specialty:
          $ref: "#/components/schemas/Specialty"
        email:
          $ref: "#/components/schemas/Email"
        phoneNumber:
          type: string
          example: "+584127659814"
    Patient:
      required:
        - fullaname
        - govId
        - birthdate
        - email
        - phoneNumber
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/UUID"
        fullaname:
          type: string
          example: José Feliciano Gutierrez García
        govId:
          type: string
          example: E99885566
        birthdate:
          type: string
          format: date
          example: "1197-08-20"
        email:
          $ref: "#/components/schemas/Email"
        phoneNumber:
          type: string
          example: "+584127659814"
    Institution:
      required:
        - fullaname
        - govId
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/UUID"
        fullaname:
          type: string
          example: José Feliciano Gutierrez García
        govId:
          type: string
          example: J-99885566
    InstitutionUser:
      required:
        - fullaname
        - govId
        - birthdate
        - email
        - phoneNumber
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/UUID"
        fullaname:
          type: string
          example: José Feliciano Gutierrez García
        govId:
          type: string
          example: E99885566
        birthdate:
          type: string
          format: date
          example: "1197-08-20"
        email:
          $ref: "#/components/schemas/Email"
        phoneNumber:
          type: string
          example: "+584127659814"
        role:
          $ref: "#/components/schemas/InstitutionUserRole"
    Email:
      type: string
      format: email
    UUID:
      type: string
      format: uuid
    Specialty:
      type: string
      enum:
        - Allergy and immunology
        - Anesthesiology
        - Dermatology
        - Diagnostic radiology
        - Emergency medicine
        - Family medicine
        - Internal medicine
        - Medical genetics
        - Neurology
        - Nuclear medicine
        - Obstetrics and gynecology
        - Ophthalmology
        - Pathology
        - Pediatrics
        - Physical medicine and rehabilitation
        - Preventive medicine
        - Psychiatry
        - Radiation oncology
        - Surgery
        - Urology
    InstitutionUserRole:
      type: string
      enum:
        - viewer
        - admin
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Doctor:
      description: Doctor object that needs to be added to the DB
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Doctor"
    Patient:
      description: Patient object that needs to be added to the DB
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Patient"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header